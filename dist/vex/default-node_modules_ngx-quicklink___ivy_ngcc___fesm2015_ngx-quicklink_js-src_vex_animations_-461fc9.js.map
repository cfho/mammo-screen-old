{"version":3,"file":"default-node_modules_ngx-quicklink___ivy_ngcc___fesm2015_ngx-quicklink_js-src_vex_animations_-461fc9.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAA6H;AACnB;AAC7E;;AAE7B;AACA;AACwC;AACE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,mCAAmC,sDAAe,CAAC,mDAAa;AAC/H,uCAAuC,gEAAyB,GAAG,yDAAyD;AAC5H;AACA,MAAM,MAAM,mDAAM;AAClB;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,qDAAU;AACxB,KAAK,iBAAiB,UAAU,MAAM,mDAAa,EAAE,IAAI,UAAU;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2DAAc;AAC9C;AACA,uDAAuD,2DAAc;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,wBAAwB,yDAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,wCAAwC,sDAAe,CAAC,4DAAsB,GAAG,sDAAe,oBAAoB,sDAAe,CAAC,iDAAa;AAC1N,4CAA4C,gEAAyB,GAAG,mEAAmE;AAC3I;AACA,MAAM,MAAM,4DAAe,EAAE;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,MAAM,iDAAM;AAClB;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,qDAAU;AACxB,KAAK,iBAAiB,UAAU,MAAM,4DAAsB,EAAE,IAAI,wB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","sources":["./node_modules/ngx-quicklink/__ivy_ngcc__/fesm2015/ngx-quicklink.js","./src/@vex/animations/fade-in-up.animation.ts"],"sourcesContent":["import { Injectable, InjectionToken, NgZone, Directive, Inject, ElementRef, Optional, Input, NgModule } from '@angular/core';\nimport { Router, PRIMARY_OUTLET, RouterPreloader, RouterLink, RouterLinkWithHref } from '@angular/router';\nimport { EMPTY } from 'rxjs';\n\n// Using a global registry so we can keep it populated across lazy-loaded\n// modules with different parent injectors which create instance of the registry.\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/router';\nconst globalRegistry = [];\nclass PrefetchRegistry {\n    constructor(router) {\n        this.router = router;\n        this.trees = globalRegistry;\n    }\n    add(tree) {\n        this.trees.push(tree);\n    }\n    shouldPrefetch(url) {\n        const tree = this.router.parseUrl(url);\n        return this.trees.some(containsTree.bind(null, tree));\n    }\n}\nPrefetchRegistry.ɵfac = function PrefetchRegistry_Factory(t) { return new (t || PrefetchRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.Router)); };\nPrefetchRegistry.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PrefetchRegistry, factory: PrefetchRegistry.ɵfac });\nPrefetchRegistry.ctorParameters = () => [\n    { type: Router }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PrefetchRegistry, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc1.Router }]; }, null); })();\nfunction containsQueryParams(container, containee) {\n    // TODO: This does not handle array params correctly.\n    return (Object.keys(containee).length <= Object.keys(container).length &&\n        Object.keys(containee).every(key => containee[key] === container[key]));\n}\nfunction containsTree(containee, container) {\n    return (containsQueryParams(container.queryParams, containee.queryParams) &&\n        containsSegmentGroup(container.root, containee.root, containee.root.segments));\n}\nfunction containsSegmentGroup(container, containee, containeePaths) {\n    if (container.segments.length > containeePaths.length) {\n        const current = container.segments.slice(0, containeePaths.length);\n        if (!equalPath(current, containeePaths))\n            return false;\n        if (containee.hasChildren())\n            return false;\n        return true;\n    }\n    else if (container.segments.length === containeePaths.length) {\n        if (!equalPath(container.segments, containeePaths))\n            return false;\n        if (!containee.hasChildren())\n            return true;\n        for (const c in containee.children) {\n            if (!container.children[c])\n                break;\n            if (containsSegmentGroup(container.children[c], containee.children[c], containee.children[c].segments))\n                return true;\n        }\n        return false;\n    }\n    else {\n        const current = containeePaths.slice(0, container.segments.length);\n        const next = containeePaths.slice(container.segments.length);\n        if (!equalPath(container.segments, current))\n            return false;\n        if (!container.children[PRIMARY_OUTLET])\n            return false;\n        return containsSegmentGroup(container.children[PRIMARY_OUTLET], containee, next);\n    }\n}\nfunction equalPath(as, bs) {\n    if (as.length !== bs.length)\n        return false;\n    return as.every((a, i) => a.path === bs[i].path || a.path.startsWith(':') || bs[i].path.startsWith(':'));\n}\n\nconst ɵ0 = function (cb) {\n    const start = Date.now();\n    return setTimeout(function () {\n        cb({\n            didTimeout: false,\n            timeRemaining: function () {\n                return Math.max(0, 50 - (Date.now() - start));\n            }\n        });\n    }, 1);\n}, ɵ1 = () => { };\nconst requestIdleCallback = typeof window !== 'undefined'\n    ? window.requestIdleCallback || ɵ0\n    : ɵ1;\nconst observerSupported = () => typeof window !== 'undefined' ? !!window.IntersectionObserver : false;\nconst ɵ2 = observerSupported;\nconst LinkHandler = new InjectionToken('LinkHandler');\nclass ObservableLinkHandler {\n    constructor(loader, registry, ngZone) {\n        this.loader = loader;\n        this.registry = registry;\n        this.ngZone = ngZone;\n        this.elementLink = new Map();\n        this.observer = observerSupported()\n            ? new IntersectionObserver(entries => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        const link = entry.target;\n                        const routerLink = this.elementLink.get(link);\n                        if (!routerLink || !routerLink.urlTree)\n                            return;\n                        this.registry.add(routerLink.urlTree);\n                        this.observer.unobserve(link);\n                        requestIdleCallback(() => {\n                            this.loader.preload().subscribe(() => void 0);\n                        });\n                    }\n                });\n            })\n            : null;\n    }\n    register(el) {\n        this.elementLink.set(el.element, el);\n        this.ngZone.runOutsideAngular(() => {\n            this.observer.observe(el.element);\n        });\n    }\n    // First call to unregister will not hit this.\n    unregister(el) {\n        if (this.elementLink.has(el.element)) {\n            this.observer.unobserve(el.element);\n            this.elementLink.delete(el.element);\n        }\n    }\n    supported() {\n        return observerSupported();\n    }\n}\nObservableLinkHandler.ɵfac = function ObservableLinkHandler_Factory(t) { return new (t || ObservableLinkHandler)(ɵngcc0.ɵɵinject(ɵngcc1.RouterPreloader), ɵngcc0.ɵɵinject(PrefetchRegistry), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nObservableLinkHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ObservableLinkHandler, factory: ObservableLinkHandler.ɵfac });\nObservableLinkHandler.ctorParameters = () => [\n    { type: RouterPreloader },\n    { type: PrefetchRegistry },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ObservableLinkHandler, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc1.RouterPreloader }, { type: PrefetchRegistry }, { type: ɵngcc0.NgZone }]; }, null); })();\nclass PreloadLinkHandler {\n    constructor(loader, registry) {\n        this.loader = loader;\n        this.registry = registry;\n    }\n    register(el) {\n        this.registry.add(el.urlTree);\n        requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));\n    }\n    unregister(_) { }\n    supported() {\n        return true;\n    }\n}\nPreloadLinkHandler.ɵfac = function PreloadLinkHandler_Factory(t) { return new (t || PreloadLinkHandler)(ɵngcc0.ɵɵinject(ɵngcc1.RouterPreloader), ɵngcc0.ɵɵinject(PrefetchRegistry)); };\nPreloadLinkHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PreloadLinkHandler, factory: PreloadLinkHandler.ɵfac });\nPreloadLinkHandler.ctorParameters = () => [\n    { type: RouterPreloader },\n    { type: PrefetchRegistry }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PreloadLinkHandler, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc1.RouterPreloader }, { type: PrefetchRegistry }]; }, null); })();\n\nclass LinkDirective {\n    constructor(linkHandlers, el, link, linkWithHref) {\n        this.linkHandlers = linkHandlers;\n        this.el = el;\n        this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();\n        this.rl = link || linkWithHref;\n        if (this.element && this.element.setAttribute) {\n            this.element.setAttribute('ngx-ql', '');\n        }\n    }\n    ngOnChanges(c) {\n        if (c.routerLink) {\n            this.linkHandler.unregister(this);\n            this.linkHandler.register(this);\n        }\n    }\n    ngOnDestroy() {\n        this.linkHandler.unregister(this);\n    }\n    get element() {\n        return this.el.nativeElement;\n    }\n    get urlTree() {\n        return this.rl.urlTree;\n    }\n}\nLinkDirective.ɵfac = function LinkDirective_Factory(t) { return new (t || LinkDirective)(ɵngcc0.ɵɵdirectiveInject(LinkHandler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.RouterLink, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.RouterLinkWithHref, 8)); };\nLinkDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LinkDirective, selectors: [[\"\", \"routerLink\", \"\"]], inputs: { routerLink: \"routerLink\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nLinkDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [LinkHandler,] }] },\n    { type: ElementRef },\n    { type: RouterLink, decorators: [{ type: Optional }] },\n    { type: RouterLinkWithHref, decorators: [{ type: Optional }] }\n];\nLinkDirective.propDecorators = {\n    routerLink: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LinkDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[routerLink]'\n            }]\n    }], function () { return [{ type: Array, decorators: [{\n                type: Inject,\n                args: [LinkHandler]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.RouterLink, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc1.RouterLinkWithHref, decorators: [{\n                type: Optional\n            }] }]; }, { routerLink: [{\n            type: Input\n        }] }); })();\n\nclass QuicklinkStrategy {\n    constructor(registry, router) {\n        this.registry = registry;\n        this.router = router;\n        this.loading = new Set();\n    }\n    preload(route, load) {\n        if (this.loading.has(route)) {\n            // Don't preload the same route twice\n            return EMPTY;\n        }\n        const conn = typeof navigator !== 'undefined' ? navigator.connection : undefined;\n        if (conn) {\n            // Don't preload if the user is on 2G. or if Save-Data is enabled..\n            if ((conn.effectiveType || '').includes('2g') || conn.saveData)\n                return EMPTY;\n        }\n        // Prevent from preloading\n        if (route.data && route.data.preload === false) {\n            return EMPTY;\n        }\n        const fullPath = findPath(this.router.config, route);\n        if (this.registry.shouldPrefetch(fullPath)) {\n            this.loading.add(route);\n            return load();\n        }\n        return EMPTY;\n    }\n}\nQuicklinkStrategy.ɵfac = function QuicklinkStrategy_Factory(t) { return new (t || QuicklinkStrategy)(ɵngcc0.ɵɵinject(PrefetchRegistry), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };\nQuicklinkStrategy.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: QuicklinkStrategy, factory: QuicklinkStrategy.ɵfac });\nQuicklinkStrategy.ctorParameters = () => [\n    { type: PrefetchRegistry },\n    { type: Router }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QuicklinkStrategy, [{\n        type: Injectable\n    }], function () { return [{ type: PrefetchRegistry }, { type: ɵngcc1.Router }]; }, null); })();\nconst findPath = (config, route) => {\n    config = config.slice();\n    const parent = new Map();\n    const visited = new Set();\n    while (config.length) {\n        const el = config.shift();\n        visited.add(el);\n        if (el === route)\n            break;\n        let children = el.children || [];\n        const current = el._loadedConfig;\n        if (current && current.routes) {\n            children = children.concat(current.routes);\n        }\n        children.forEach((r) => {\n            if (visited.has(r))\n                return;\n            parent.set(r, el);\n            config.push(r);\n        });\n    }\n    let path = '';\n    let current = route;\n    while (current) {\n        if (isPrimaryRoute(current)) {\n            path = `/${current.path}${path}`;\n        }\n        else {\n            path = `/(${current.outlet}:${current.path}${path})`;\n        }\n        current = parent.get(current);\n    }\n    return path.replace(/\\/\\//, '/');\n};\nconst ɵ0$1 = findPath;\nfunction isPrimaryRoute(route) {\n    return route.outlet === PRIMARY_OUTLET || !route.outlet;\n}\n\nclass QuicklinkModule {\n}\nQuicklinkModule.ɵfac = function QuicklinkModule_Factory(t) { return new (t || QuicklinkModule)(); };\nQuicklinkModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: QuicklinkModule });\nQuicklinkModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        {\n            provide: LinkHandler,\n            useClass: ObservableLinkHandler,\n            multi: true\n        },\n        {\n            provide: LinkHandler,\n            useClass: PreloadLinkHandler,\n            multi: true\n        },\n        PrefetchRegistry,\n        QuicklinkStrategy\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QuicklinkModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [LinkDirective],\n                providers: [\n                    {\n                        provide: LinkHandler,\n                        useClass: ObservableLinkHandler,\n                        multi: true\n                    },\n                    {\n                        provide: LinkHandler,\n                        useClass: PreloadLinkHandler,\n                        multi: true\n                    },\n                    PrefetchRegistry,\n                    QuicklinkStrategy\n                ],\n                exports: [LinkDirective]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QuicklinkModule, { declarations: [LinkDirective], exports: [LinkDirective] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QuicklinkModule, QuicklinkStrategy, LinkHandler as ɵa, ObservableLinkHandler as ɵb, PreloadLinkHandler as ɵc, PrefetchRegistry as ɵe, LinkDirective as ɵɵLinkDirective };\n\n","import { animate, style, transition, trigger } from '@angular/animations';\r\n\r\nexport function fadeInUpAnimation(duration: number) {\r\n  return trigger('fadeInUp', [\r\n    transition(':enter', [\r\n      style({\r\n        transform: 'translateY(20px)',\r\n        opacity: 0\r\n      }),\r\n      animate(`${duration}ms cubic-bezier(0.35, 0, 0.25, 1)`, style({\r\n        transform: 'translateY(0)',\r\n        opacity: 1\r\n      }))\r\n    ])\r\n  ]);\r\n}\r\n\r\nexport const fadeInUp400ms = fadeInUpAnimation(400);\r\n"],"names":[],"sourceRoot":"webpack:///"}